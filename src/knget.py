#!/usr/bin/env python3
# coding: utf-8

import os
import re
import sys
import json
import time
import random
import requests
from inifile import IniFile
from inifile import IniException

_NO_ERROR = 0
_CONFIG_ERROR = 1
_CONNECT_ERROR = 2
_DOWNLOAD_ERROR = 3

_USAGE = """\
Usage: {0} <tag> <[begin]<end>> {{ext_tags}}
""".format(sys.argv[0])

_CONFIG_TIPS = """\
; KngetPy Project.
; File auto-generated by {0}
""".format(sys.argv[0])

_DEFAUL_CONFIG = {
    "custom": {
        "base_url": "https://konachan.com",
        "json_regex": "Post.register\\((\\{.+\\})\\)",
        "user_agent": "Mozilla/5.0(Macintosh;U;IntelMacOSX10_6_8;en-us)AppleWebKit/534.50(KHTML,likeGecko)Version/5.1Safari/534.50"
    },
    "download": {
        "debug": 0,
        "thread": 8,
        "timeout": 10,
        "maxsize": 10,
        "bufsize": 1048576,
        "retry_wait": 8,
        "retry_count": 3
    }
}

class Knget():
    def __init__(self, config):
        self._custom = config.get_section('custom')
        self._config = config.get_section('download')

        self._headers = {
            'User-Agent': self._custom.get('user_agent'),
            'Referer': self._custom.get('base_url') + '/post'
        }

    def run(self, tag, begin, end, ext_tags):    
        for page in range(begin, end + 1):
            # 模拟手动点击时间
            time.sleep(random.randint(0, 2) + random.random())

            content = requests.get(
                self._custom.get('base_url') + '/post', params={
                    'tags': tag,
                    'page': page
                }
            ).content.decode('utf-8')

            post_infos = re.findall(self._custom.get('json_regex'), content)
            post_infos = [json.loads(post_info) for post_info in post_infos]

            if ext_tags is None:
                # <self> <tag> <begin> <end>
                for post_info in post_infos:
                    print(post_info['file_url'])
            else:
                # <self> <tag> <begin> <end> <ext_tags>
                for post_info in post_infos:
                    tags = post_info['tags'].split()

                    if all([ext_tag in tags for ext_tag in ext_tags]):
                        print(post_info['file_url'])

def usage(status=None):
    print(_USAGE)

    if status is None:
        return
    else:
        sys.exit(status)

def main(argv):
    if os.path.exists('config.ini'):
        try:
            config = IniFile('config.ini')
        except IniException as e:
            print("{0}\n".format(e))
            print("Possible cannot read?")
            sys.exit(_CONFIG_ERROR)
    else:
        with open('config.ini', 'w') as fp_config:
            config = IniFile()
            config.reset(_DEFAUL_CONFIG)
            config.dump(fp_config)

    knget = Knget(config)

    if len(argv) < 3:
        return usage(_NO_ERROR)
    elif len(argv) == 3:
        # <self> <tag> <end>
        knget.run(argv[1], 1 ,int(argv[2]), None)
    else:
        # <self> <tag> <begin> <end> <ext_tags...> 
        knget.run(argv[1], int(argv[2]), int(argv[3]), argv[4:])

if __name__ == '__main__':
    main(sys.argv)
